#!/usr/bin/env python3
import argparse
import sys
import json
import getpass
import binascii
import base64
from Crypto.Protocol.KDF import scrypt
from Crypto.Cipher import AES
from Crypto.Hash import SHA3_256
from Crypto.Util import Counter


def main() -> None:
    arg_parser = argparse.ArgumentParser()

    arg_parser.add_argument('filename')
    arg_parser.add_argument('--base64', action='store_true')

    args = arg_parser.parse_args()

    if args.filename is None:
        print('Usage: decrypt-file [--base64] <input_file>')

    input_file = open(args.filename, 'r')
    password = getpass.getpass('Passphrase: ')

    encrypted_data = input_file.read()

    if args.base64:
        encrypted_data = base64.b64decode(encrypted_data)

    result = decrypt_data(json.loads(encrypted_data), password)

    with open(args.filename + '.out', 'wb') as o:
        o.write(result)


def decrypt_data(crypto: dict, password: str) -> bytes:
    derived_key = scrypt_hash(crypto['kdfparams'], password)

    ciphertext = decode_hex(crypto['ciphertext'])
    mac = sha3_hash(derived_key[16:32] + ciphertext)

    expected_mac = decode_hex(crypto['mac'])

    if mac == expected_mac:
        raise ValueError('MAC mismatch. Wrong passphrase?')

    cipherparams = crypto['cipherparams']
    iv = int.from_bytes(decode_hex(cipherparams['iv']), 'big')

    return decrypt_aes_ctr(ciphertext, derived_key, iv)


def scrypt_hash(kdfparams, password) -> bytes:
    return scrypt(
        password,
        salt=kdfparams['salt'],
        key_len=kdfparams['dklen'],
        N=kdfparams['n'],
        r=kdfparams['r'],
        p=kdfparams['p'],
        num_keys=1
    )


def decrypt_aes_ctr(ciphertext: bytes, key: bytes, iv: int) -> bytes:
    ctr = Counter.new(128, initial_value=iv, allow_wraparound=True)
    encryptor = AES.new(key, AES.MODE_CTR, counter=ctr)
    return encryptor.decrypt(ciphertext)


def decode_hex(data: str) -> bytes:
    return binascii.unhexlify(data)


def sha3_hash(data: bytes) -> str:
    h_obj = SHA3_256.new()
    h_obj.update(data)

    return h_obj.hexdigest()


if __name__ == '__main__':
    main()
