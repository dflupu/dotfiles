#!/usr/bin/env python3
import sys
import json
import binascii
import getpass
from Crypto.Protocol.KDF import scrypt
from Crypto.Cipher import AES
from Crypto.Util import Counter
from Crypto.Hash import SHA3_256
from Crypto import Random


def main() -> None:
    if len(sys.argv) < 2:
        print('Usage: encrypt-file <input_file>')

    input_file = open(sys.argv[1], 'rb')
    output_file = open(sys.argv[1] + '.aes', 'w')
    password = getpass.getpass('Passphrase: ')

    result = encrypt_data(input_file.read(), password)
    json.dump(result, output_file)

    print('Done. Remember to delete the unencrypted file if necessary!')


def encrypt_data(data: bytes, password: str) -> dict:
    kdfparams = {
        'dklen': 32,
        'n': 262144,
        'r': 1,
        'p': 8,
        'salt': encode_hex(Random.get_random_bytes(16)),
    }

    derived_key = scrypt_hash(kdfparams, password)

    iv = Random.get_random_bytes(16)
    ciphertext = encrypt_aes_ctr(data, derived_key, int.from_bytes(iv, 'big'))
    mac = sha3_hash(derived_key[16:32] + ciphertext)

    return {
        'cipher': 'aes-128-ctr',
        'cipherparams': {
            'iv': encode_hex(iv),
        },
        'ciphertext': encode_hex(ciphertext),
        'kdf': 'scrypt',
        'kdfparams': kdfparams,
        'mac': mac,
    }


def scrypt_hash(kdfparams: dict, password: str) -> bytes:
    return scrypt(
        password,
        salt=kdfparams['salt'],
        key_len=kdfparams['dklen'],
        N=kdfparams['n'],
        r=kdfparams['r'],
        p=kdfparams['p'],
        num_keys=1,
    )


def encrypt_aes_ctr(data: bytes, key: bytes, iv: int) -> bytes:
    ctr = Counter.new(128, initial_value=iv, allow_wraparound=True)
    encryptor = AES.new(key, AES.MODE_CTR, counter=ctr)
    ciphertext = encryptor.encrypt(data)
    return ciphertext


def sha3_hash(data: bytes) -> str:
    h_obj = SHA3_256.new()
    h_obj.update(data)

    return h_obj.hexdigest()


def encode_hex(data: bytes) -> str:
    return binascii.hexlify(data).decode('utf-8')


if __name__ == '__main__':
    main()
